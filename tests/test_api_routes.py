# Standard library imports
import unittest
from os import path, remove

# Third party imports
from flask_testing import TestCase
from flask import jsonify
from xml.etree import ElementTree as ET

# Local app imports
from partyparser import create_app, db
from partyparser.models import CourtCase
from partyparser.helpers import verified_file_type
from config import TestConfig

class ApiRoutesTests(TestCase):
    """Test suite for JSON API endpoints"""

    def create_app(self):
        return create_app(TestConfig)

    # Setup before each test method
    def setUp(self):
        self.test_file = 'test_file.xml'
        self.uploads_dir = path.join(self.app.root_path, 'uploads')
        self.test_file_path = path.join(self.uploads_dir, self.test_file)
        db.create_all()
        self.seed_db()

    # Cleanup after each test method
    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.remove_test_xml_files()

   # Helper methods
    def seed_db(self):
        # Seeds test db with two CourtCases
        mock_data = [
            CourtCase(plaintiff='John Doe', defendant='Jane Doe'),
            CourtCase(plaintiff='Frank Zappa', defendant='Eric Clapton')
        ]
        db.session.add_all(mock_data)
        db.session.commit()

    def create_test_xml_file(self):
        # Creates 'test_file.xml' in project root dir
        root = ET.Element('root')
        for x in range(3):
            child = ET.SubElement(root, 'child')
        ET.SubElement(child, 'grandchild').text = 'Some text!'
        tree = ET.ElementTree(root)
        with open(self.test_file, 'w'):
            tree.write(self.test_file)

    def remove_test_xml_files(self):
        # Cleanup xml files generated by tests
        if path.exists(self.test_file):
            # Deletes test_file in project root
            remove(self.test_file)
        if path.isfile(self.test_file_path):
            # Deletes test_file in uploads dir
            remove(self.test_file_path)

    def test_get_to_api_cases(self):
        """Test GET to /api/cases returns all courtcases as JSON"""
        db_cases = CourtCase.query.all()
        res = self.client.get('/api/cases')
        self.assertEqual(res.status_code, 200,
                         'GET to /api/cases should return 200 status code')
        self.assertEqual(len(res.data), 2)
        self.assertIn(res.data, 'John Doe')


if __name__ == '__main__':
    unittest.main(verbosity=2)
